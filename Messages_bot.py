import json
from datetime import datetime
from random import choice


def Command_doesnt_exist():
    choices = choice(['That command doesnt exist', 'That command doesnt exist you dumbfuk',
                      'WTF man,how many times do i have to tell you it doesnt exist',
                      'are you retarded?It doesnt fuking exist'])
    return choices


def random_color():
    # 1000 possible colors
    colors = [0x45CF52, 0xCCB75F, 0x2DEBE9, 0xD61037, 0xF047F4, 0xB5FED0, 0x114AA4, 0x2E2CA8, 0x6A219B, 0x7B1FFB,
              0x321EFA, 0x4AF49F, 0xB768C3, 0x3DF1E4, 0x4585C7, 0x46019C, 0x711A2F, 0xA4ABFC, 0xF64967, 0x60011A,
              0x3E8AF5, 0x9AEBDB, 0xBCE1C6, 0x8861D7, 0xC6C039, 0x30D7A1, 0xD21959, 0xE3A915, 0xF5A0D3, 0x9A05D3,
              0xF68210, 0xD94151, 0x99043C, 0x1A5FD3, 0xA59BA4, 0x699B4E, 0x16B128, 0x91C632, 0x04BA3C, 0xACCF04,
              0x93989E, 0x275540, 0xC42323, 0x0A7BD3, 0xD15103, 0x7F88F0, 0x7A462E, 0x69D8ED, 0x585566, 0x6275F5,
              0x7E6BED, 0x6D9127, 0x8CFDE2, 0x9E8496, 0x978CF0, 0x887E5E, 0x688331, 0x39E0B5, 0x1ACE5A, 0x59D51C,
              0xD9EA81, 0x03BD65, 0x15CC67, 0x9B9394, 0xA289FD, 0x21D6E5, 0x4F900E, 0x8A6530, 0xC33886, 0x32925D,
              0x1D8951, 0xD7A718, 0x893BFF, 0xDE96D1, 0xDB479C, 0x01F234, 0xD13E2E, 0x4ABC25, 0x5C61D7, 0x3AF554,
              0x630514, 0x60AA98, 0x7EB370, 0xBD1674, 0x5D3E78, 0xF3639D, 0xA11A02, 0x637722, 0x225679, 0x568239,
              0x79482D, 0x9B4298, 0x07BB27, 0x0E2A62, 0xF57AC7, 0x512C80, 0x630228, 0x6C18B7, 0x49994C, 0xF22DB6,
              0x5B4C87, 0xA7D0FB, 0xC0A8E7, 0x3E46C4, 0x33B614, 0xB69CB3, 0xA90584, 0x3420D1, 0xED8317, 0xEA2E9C,
              0xDFC9D4, 0x000097, 0x37A529, 0xD091C7, 0x762C7F, 0xB32E1B, 0x4D8210, 0x1150C0, 0xB5147B, 0x7B2BB3,
              0x5DE938, 0x8DF424, 0x5FAE5F, 0x8B3E2C, 0xE903D2, 0x437B80, 0x1996FE, 0xD52EBD, 0x1591F2, 0x389543,
              0x11D7AA, 0xD0C65C, 0xE5A806, 0xA8572C, 0x2C64F8, 0x056810, 0x11AFAE, 0xE7CC83, 0x0C85A3, 0x53947E,
              0x9736CD, 0x919476, 0xC3167F, 0xA92FA6, 0x103EC4, 0x788922, 0x9CB1FB, 0xBCA773, 0x01A5A5, 0x266E8F,
              0x08596E, 0x0E9F2F, 0x7ED132, 0xD92F3E, 0x036245, 0x72286C, 0x365E99, 0x4EB392, 0xD719C8, 0xF695BE,
              0xC3FA15, 0x1C641A, 0x2552E8, 0xEC5FC6, 0xC04E34, 0xB740CB, 0x7F4FCA, 0x467674, 0x5B08A8, 0x6F5D80,
              0x1A6FAA, 0x84B47A, 0x9611F5, 0xC6B853, 0xE9C6E8, 0xB1AA71, 0xB81E27, 0x2590A5, 0x858E56, 0x8C8B53,
              0x697B42, 0xA6687F, 0x5ED228, 0x52B73C, 0x8515E3, 0xA80F98, 0xC9AE9B, 0x22BC7D, 0xC402C7, 0xF5F3E5,
              0x23AE82, 0x20B142, 0xA3B95B, 0x6DB1C7, 0xB627E2, 0x63043F, 0x4BE006, 0x84471A, 0x699B32, 0x5D396F,
              0x35D4FC, 0xBEE3AF, 0x3CEEB9, 0x6B83B4, 0x6A7748, 0x262BD8, 0x36B39A, 0xD7A696, 0x7DF234, 0xFBE505,
              0x5B01BC, 0xE34D56, 0x10B7F3, 0x08BABA, 0x6D002B, 0x839809, 0xEB76F8, 0x726CED, 0xCE017E, 0x24C537,
              0x6C90E0, 0x1FD5D6, 0xA81780, 0xE3FD0C, 0xD9A2B2, 0x921FC4, 0x88C0F3, 0xF4A0D2, 0x30A173, 0xFDCF26,
              0x80674B, 0x3F5CE2, 0x01E4D6, 0x21C0EF, 0xE4AE01, 0x110057, 0x497025, 0x2F1D87, 0xC08408, 0x1E6441,
              0x408695, 0xE64EF0, 0x2D9932, 0x485241, 0x287F97, 0x721F39, 0x65B838, 0xB27451, 0x4A91C6, 0x3CC169,
              0xFC7C12, 0xEAF23E, 0xFB095E, 0x6F3347, 0x9AA401, 0xF987CD, 0x188C69, 0x0048A2, 0xBBFAEC, 0x906B5D,
              0xFB059E, 0x74A2C8, 0x85E08F, 0xB5F523, 0xA8EDDE, 0x028C4D, 0x063EEB, 0x27F71C, 0x42F42B, 0x922592,
              0x633E34, 0x112F2E, 0xB60AE3, 0x53B520, 0x3D8AC0, 0x8322A5, 0xC14E2D, 0xB89D39, 0x67999B, 0x4905F7,
              0x8FAF69, 0x4B21D5, 0x375B30, 0x3AEFC6, 0x1DBEF6, 0xA0FDE1, 0x2EDAD9, 0x02F937, 0xBE39A2, 0xBFCC5A,
              0xD71F00, 0xDCBB11, 0x0FC5B8, 0xCEB371, 0x121280, 0xB95EDA, 0x53D42F, 0xABD822, 0x6C0B92, 0x82E084,
              0xCEF5EB, 0xB6AB41, 0xD92832, 0xDB2EC3, 0x96DFE0, 0x9DEB8F, 0xD72D10, 0x09F479, 0x005AF6, 0x132E63,
              0x95C871, 0x0FF15C, 0x919886, 0xC19E89, 0xBCE092, 0x31D57C, 0x03B133, 0x04CF6B, 0x7D4F5D, 0xB069AC,
              0xCD2EA5, 0xA09AA9, 0x4DA2B7, 0xE6F0F3, 0x165BD1, 0x068049, 0x547B86, 0xB33A6F, 0x063801, 0x3A72FC,
              0x30E702, 0xB4B018, 0x897814, 0x5DF1BA, 0x208B76, 0x12006B, 0xBCB24F, 0xF35FDB, 0x0EFB2C, 0xE20770,
              0xD978F0, 0x35008B, 0xA239FE, 0xBA4EC6, 0x28DC6D, 0x876D61, 0x6152C0, 0x970A9E, 0x3B71DC, 0xBF8E94,
              0x925C6E, 0x06F4CB, 0x557703, 0x734E58, 0xCA72E3, 0x7B780A, 0x77C024, 0xF1DA3B, 0x20FF41, 0xF2E3BB,
              0x91A7CF, 0x4699E6, 0x49BE5B, 0xE938BC, 0xD3B91D, 0x23E10A, 0xB8CD52, 0x32E498, 0x671403, 0x24BCAE,
              0x040C00, 0x8DC700, 0xB46557, 0x719FF5, 0xA904D0, 0xF9CEA4, 0x75EB89, 0xDDAABF, 0x6BE472, 0xFB651B,
              0x9260A1, 0x253C28, 0xB43C22, 0x8E9E51, 0xE1BB92, 0x3F1809, 0xFF6F6C, 0x3CF502, 0xEE0DD7, 0xF899E2,
              0x2F7305, 0x20F8D5, 0x4638C1, 0x3C0AD7, 0xDBB820, 0xC99701, 0x01B139, 0xD13590, 0x6F7208, 0x89F34B,
              0xF05242, 0x455227, 0xBBE3B1, 0x555C8C, 0x66E155, 0x0C8B1C, 0x80611F, 0x1C7C9D, 0xE00D32, 0x8E4986,
              0xE0107A, 0x24767D, 0xA0E02C, 0x1B589B, 0x91398D, 0x46FFDF, 0x307AC7, 0xE1ECF3, 0x63B72D, 0x9194E7,
              0xE22906, 0xE0DD28, 0x26AC73, 0x4BA226, 0xC7C0F2, 0x876E6E, 0x124751, 0x84B8EA, 0xF8BE98, 0x482087,
              0xA61ACD, 0x7C37B6, 0x1C492A, 0x685B19, 0x978F0F, 0x27B248, 0x7C8CA0, 0xC82C49, 0xC057F1, 0x6BEAD8,
              0x48F73C, 0x5D07CF, 0x4C4367, 0x9DC094, 0x8E0B75, 0xF54EF0, 0x52C3AC, 0x548919, 0x587682, 0xDFBAE3,
              0x4FB760, 0x2CE770, 0xFFF590, 0xD6D160, 0x793A8A, 0x3B8980, 0x178CBA, 0x06CD3A, 0xD3E154, 0x6376CF,
              0x9ADD4B, 0x3C7817, 0xFC2041, 0x654A7B, 0x747E9E, 0x707001, 0x8A58AF, 0x2A2918, 0x7348FE, 0xD2CFD7,
              0x32CD00, 0x17F385, 0x295388, 0xE78554, 0xA1EA73, 0x9FED27, 0x2733C9, 0x195A3D, 0x78527A, 0xE48E26,
              0x6D024D, 0x86D932, 0x1D0AC9, 0xC4834C, 0x1F4D76, 0x352A79, 0x2081C7, 0x3DE0AA, 0xC81902, 0x5B4D9E,
              0x184A8B, 0x2B341D, 0xCD43C8, 0xA546B7, 0xAA980C, 0x90408A, 0x0431C2, 0x06B568, 0x3163DC, 0x96D1BB,
              0x2E4040, 0x3D6315, 0x5D51CB, 0xD3335A, 0xA76D06, 0x07BE4A, 0x655E4A, 0x10AC3D, 0xED721C, 0x2B87AA,
              0x6654AF, 0xDA7C3B, 0x671F22, 0x74BB1C, 0x2ED58B, 0xB048B9, 0x664267, 0x9DA733, 0x34C407, 0x8DF5A4,
              0x8EFF0F, 0x9FF553, 0xD88F7B, 0x765AAB, 0xFFE919, 0x390BE3, 0x8C6CB6, 0xCD1D1C, 0xE9E0DA, 0xCA04CC,
              0x839BB8, 0x433C6E, 0x31AD64, 0x71A4BE, 0xC33AEE, 0x8A65B3, 0xCD71C8, 0x027750, 0xC5E955, 0x35641B,
              0xEF2A9E, 0x496EE9, 0x7091E0, 0xCE9CA0, 0xD80919, 0xE138E9, 0xF47E69, 0x25039B, 0xDD1AD8, 0x8738B0,
              0xE6E685, 0xBD9B8C, 0x23BBAC, 0xF22F93, 0xA0DAD8, 0x551E3A, 0x6A7DFB, 0x1A4D5B, 0xE7B8D1, 0x7CA2E7,
              0xDC06AB, 0x4E8828, 0x54D6E8, 0x078F99, 0xDB439A, 0xC55DA1, 0xBEA01C, 0xF4B316, 0x297831, 0xAAEDFA,
              0x5E602B, 0x1CA4A1, 0x63E72C, 0xAFAB47, 0x868238, 0xACEA8E, 0x564772, 0xD35F2B, 0x6672F2, 0x508806,
              0x2D8603, 0x16133A, 0xDFD352, 0xA439FF, 0xB295D2, 0xC62292, 0x299922, 0xBCCC62, 0x1AF176, 0x061D74,
              0xD99F61, 0x9964CB, 0x31DAFC, 0xD2E88A, 0x43BA27, 0x425DA7, 0x03381D, 0x25DF07, 0x561F42, 0x54E839,
              0xE342FC, 0x68DAE9, 0xA95EAB, 0x96CAD6, 0x8193E6, 0xC4A565, 0xD88F6A, 0xF9EF5F, 0x67AAA3, 0x611F56,
              0x4384DC, 0xE4DD29, 0x673584, 0xF7071E, 0x934F37, 0xEB5016, 0xC84249, 0xBF08CC, 0x7C70DA, 0xA06B8A,
              0xA2E5C1, 0xE967AB, 0x9EF62D, 0xE9E640, 0xE41989, 0x0D2E93, 0x52AFE2, 0xC1161C, 0xDEADE9, 0x93DE01,
              0x024A6D, 0x7DC98C, 0xEDEB30, 0x2291E2, 0xB6A9AC, 0xA9BD18, 0xDD2F96, 0x4AE5C4, 0xDDDF58, 0xF3F514,
              0xE30EA9, 0xB08757, 0xEB9C71, 0x67EFE5, 0xDB2E62, 0xB78E2B, 0xD7D468, 0xBECADE, 0xF4EF14, 0xF0C402,
              0x8482E1, 0xD921E2, 0x7A15D4, 0x5A2D85, 0xA88EC5, 0xD6FAEC, 0x47E236, 0x4F159A, 0x2C4F72, 0x08AB40,
              0xCA3273, 0x109D97, 0x392588, 0xA656DD, 0x95CF57, 0x66B842, 0x8FB56C, 0xE9EBA9, 0x50BAA5, 0xE342B1,
              0xC188EE, 0x406F58, 0x2BF65C, 0xF51430, 0x25B60D, 0xC98BEC, 0x05452C, 0x4CDFA8, 0x842F60, 0x496D6A,
              0xE93ACB, 0x8FA761, 0x6EF6A7, 0xCE3CD3, 0xDFC9CE, 0xC751B6, 0xD737B9, 0x45062C, 0xA85FD3, 0xC7F813,
              0xA65083, 0x4B72F7, 0x6D0878, 0xCECB7C, 0x41B8A7, 0xD61D6E, 0xAFADB9, 0x422369, 0xEE9FDE, 0x854333,
              0xA198AC, 0xD56B74, 0x9A06C0, 0xA7F53E, 0xAB2B0E, 0x03CDFA, 0xD472D4, 0x132B6F, 0xE8F55F, 0x2A78BC,
              0xC39ADB, 0xFEA7CC, 0x06E9E3, 0xB1274A, 0x8BA096, 0xD72C52, 0xF1A716, 0x85BAB9, 0x207E08, 0x4D13B1,
              0x976966, 0xDB7C9D, 0x4E71D3, 0x67C34A, 0xEDA160, 0xCFEAC1, 0x305C68, 0xC44126, 0xA689E2, 0x8D65B3,
              0xD75330, 0xCFFEBF, 0x5D1C2D, 0xB132C0, 0x2B79A5, 0x7ECD6C, 0xCE4281, 0xCD2E5F, 0x21E732, 0x19C340,
              0x94ECF0, 0x623EC3, 0xACA567, 0x327F60, 0xC8D88D, 0xD633A4, 0xAC0398, 0xA6D6D9, 0x99CEC4, 0x10220A,
              0xE5F029, 0x5DC386, 0xF55790, 0x46362A, 0xEBFA8B, 0xAEFE2E, 0x8788FC, 0xA2A006, 0xA34B0D, 0xD647BF,
              0x830B37, 0x8ED0FD, 0x57284F, 0x3603D3, 0x7935A0, 0x98D972, 0x84107F, 0x599416, 0xB094A2, 0x072406,
              0xBE5437, 0x0250FE, 0xCBBE47, 0x4A3364, 0x64C473, 0x08C062, 0xA8064C, 0x66CB2E, 0xD42DD8, 0xD6E304,
              0x44C3B4, 0xEF9749, 0xA0B9B8, 0x3FE741, 0x2219D3, 0x40BC79, 0xF3713E, 0xD94BA9, 0x318004, 0xA271A1,
              0xD3BCC3, 0x6A911C, 0x35DCBC, 0x701C16, 0x396E76, 0x1EF9FE, 0x5E9FA4, 0x7D06A5, 0x4A24D2, 0x8EA162,
              0xCC9C90, 0xA668A3, 0xC2EC8F, 0xC75BBE, 0x151259, 0x780B82, 0xDB1442, 0xE0D546, 0x527047, 0xC45086,
              0xF630F4, 0xF1A85B, 0xD2E0AF, 0x79130B, 0xDBFE73, 0x4DA415, 0xF961BD, 0x70E922, 0x39B948, 0x84FDA6,
              0x424787, 0x642257, 0xC245CB, 0x8DB2F0, 0x65A951, 0x566000, 0xF844B8, 0xBE70DB, 0x697C6B, 0xFD4261,
              0xDB6135, 0xAA534C, 0xE56A03, 0x2D6A6F, 0xEF136B, 0x0E9950, 0x357B50, 0xF54728, 0x66002A, 0x4E2BB9,
              0x2D8396, 0x5E31E9, 0x4CBD12, 0xDB5DD7, 0x3A9377, 0x369444, 0x76BD91, 0x302400, 0x44CA46, 0x309E5A,
              0xDA69E4, 0x6051AA, 0x4291F0, 0xE8B9C8, 0x065674, 0x76C4E4, 0x4B7BB2, 0x479C83, 0xA07C4B, 0x508ABA,
              0x650BE4, 0xBD398C, 0xAEA5AC, 0x1A506C, 0xB8D524, 0xC67DC7, 0x119F10, 0x13FC75, 0x839C3B, 0xCD7531,
              0x79AAAD, 0x269A3D, 0x63F888, 0x8218BB, 0x68186E, 0x546C31, 0xD60BCF, 0xD0CCAB, 0x1D3FAC, 0x829ACA,
              0xD2B16F, 0xACCD04, 0x85317F, 0x13DE5B, 0xC1ACD4, 0xC7565B, 0xABA22C, 0x24BC17, 0xB342A4, 0x7D7B2F,
              0x54F925, 0xA2B77A, 0x0C1045, 0x5D6CD4, 0x2810D8, 0xC73E47, 0x966548, 0xA1104C, 0x713F8E, 0x04E690,
              0x5ADA15, 0x716909, 0xB94954, 0x94E42D, 0x4F2C19, 0x9D0216, 0xBDE5EB, 0x1A052F, 0x641D0F, 0x5AD0E4,
              0x7DEAE2, 0xA32D57, 0xA2EE5A, 0xEA3F03, 0x72F86D, 0xBEB846, 0xA2EDD6, 0xE54752, 0x3F5947, 0x5357E5,
              0x0C2EFA, 0x746E53, 0x22D5E8, 0x503FDE, 0x226DDC, 0x8AA95C, 0x4ECE15, 0x22F6FB, 0x8B5D01, 0xBA9E3B,
              0x986620, 0xFA1BCB, 0x636D09, 0xA94ACD, 0x3D39D1, 0x9863C7, 0xC0902B, 0x3C9209, 0x08AE5A, 0xCAC8D9,
              0xA5E7F3, 0xD9EFA4, 0xAD806B, 0x021AA1, 0x362D5F, 0x304DCA, 0xEC12D1, 0xA829F2, 0xEB43FC, 0x16A8CB,
              0xB4C138, 0xABD39E, 0x2F9BE1, 0xF7277F, 0x50E4B9, 0xD8009E, 0x7167A6, 0xEDA2ED, 0xDD5A58, 0x1D3FC9,
              0x3A2BD3, 0x028D03, 0xD9A83D, 0xCE3E94, 0xAB93A4, 0xC571EB, 0x16155C, 0xC1B897, 0x9909A0, 0xBA00C8,
              0x1A7003, 0x539333, 0xEE5323, 0x50F5E7, 0xDE6CF5, 0xB86A77, 0x4943C8, 0x626D26, 0xF2D8C2, 0xAEC23C,
              0x84CE34, 0x874A2D, 0xDEFFE4, 0x1695E9, 0x3A2E43, 0xC4B5B7, 0xCBFB1A, 0x6A2045, 0xB450D4, 0xFB32DB,
              0x4943DA, 0xE3A9C9, 0xC00827, 0xAAA49C, 0x06D66C, 0xF28F4B, 0xA326AA, 0xAC2B9E, 0x4CA42E, 0x95F92E]
    color = choice(colors)
    return color


def check_domain(url, blacklisted):
    for words in blacklisted:
        if words in url:
            return True


class TimeTable:
    sunday = ['Hindi/French', 'Maths', 'Economics', 'Break', 'Physics', 'Stretch', 'Biology', 'History', 'English']
    monday = ['English', 'Maths', 'Hindi/French', 'Break', 'Geography', 'Stretch', 'IT', 'NAP-eng', 'NAP-math']
    tuesday = ['Test', 'Test', 'Break', 'Maths', 'Chemistry', 'English', 'Break', 'Civics', 'NAP-science']
    wednesday = ['Hindi/French', 'English', 'Biology', 'Break', 'Maths', 'Stretch', 'Civics', 'Maths', 'IT']
    thursday = ['Geography', 'Hindi/French', 'Physics', 'Break', 'ME', 'Stretch', 'English', 'Maths', 'Chemistry']

    week = [sunday, monday, tuesday, wednesday, thursday]

    def get_day(self, days=None):
        if days is None:
            days = int(datetime.now().strftime('%w'))
        day = TimeTable.week[days]
        return day

    def get_time(self, time=None):
        if time is None:
            time = int(datetime.now().strftime('%H%M'))
        return time

    def get_period(self, _day=None, _time=None):

        day = self.get_day(_day)
        time = self.get_time(_time)

        if int(datetime.now().strftime('%w')) != 2:
            if 800 <= time < 845:
                return day[0]
            elif 846 <= time < 930:
                return day[1]
            elif 931 <= time < 1015:
                return day[2]
            elif 1016 <= time < 1030:
                return day[3]
            elif 1031 <= time < 1115:
                return day[4]
            elif 1116 <= time < 1130:
                return day[5]
            elif 1131 <= time < 1215:
                return day[6]
            elif 1216 <= time < 1300:
                return day[7]
            elif 1301 <= time < 1345:
                return day[8]
            else:
                return f'No school at {datetime.now().strftime("%I:%M %p")}'

        elif day == 2:
            if 755 <= time < 840:
                return day[0]
            elif 841 <= time < 935:
                return day[1]
            elif 936 <= time < 945:
                return day[2]
            elif 946 <= time < 1030:
                return day[3]
            elif 1031 <= time < 1115:
                return day[4]
            elif 1116 <= time < 1200:
                return day[5]
            elif 1131 <= time < 1215:
                return day[6]
            elif 1216 <= time < 1300:
                return day[7]
            elif 1301 <= time < 1345:
                return day[8]
            else:
                return f'No school at {datetime.now().strftime("%I:%M %p")}'

    def get_next_period(self, x=None, y=None):

        day = self.get_day(x)
        time = self.get_time(y)

        if day != 2:
            if 800 <= time < 845:
                return day[1]
            elif 846 <= time < 930:
                return day[2]
            elif 931 <= time < 1015:
                return day[3]
            elif 1016 <= time < 1030:
                return day[4]
            elif 1031 <= time < 1115:
                return day[5]
            elif 1116 <= time < 1130:
                return day[6]
            elif 1131 <= time < 1215:
                return day[7]
            elif 1216 <= time < 1300:
                return day[8]
            elif 1301 <= time < 1345:
                return 'This is the last period'
            else:
                return 'School is over!'

        elif day == 2:
            if 755 <= time < 840:
                return day[1]
            elif 841 <= time < 935:
                return day[2]
            elif 936 <= time < 945:
                return day[3]
            elif 946 <= time < 1030:
                return day[4]
            elif 1031 <= time < 1115:
                return day[5]
            elif 1116 <= time < 1200:
                return day[6]
            elif 1131 <= time < 1215:
                return day[7]
            elif 1216 <= time < 1300:
                return day[8]
            elif 1301 <= time < 1345:
                return 'This is the last period'
            else:
                return 'School is over!'



